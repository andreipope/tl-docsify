basePath: /v1.1
definitions:
  httpError.Error:
    properties:
      code:
        type: string
      docs_url:
        type: string
      message:
        type: string
    required:
      - message
    type: object
  schema.ClassifyBulkResponse:
    properties:
      data:
        items:
          $ref: "#/definitions/schema.ClassifyResponse"
        type: array
      page_info:
        $ref: "#/definitions/schema.ClassifyPageInfo"
    type: object
  schema.ClassifyClip:
    properties:
      confidence:
        type: string
      end:
        type: number
      option:
        type: string
      prompt:
        type: string
      score:
        type: number
      start:
        type: number
      thumbnail_url:
        type: string
    type: object
  schema.ClassifyLabel:
    properties:
      name:
        example: car
        type: string
      prompts:
        example:
          - truck
          - sedan
          - suv
          - convertible
        items:
          type: string
        minItems: 1
        type: array
    required:
      - name
      - prompts
    type: object
  schema.ClassifyLabelResult:
    properties:
      clips:
        items:
          $ref: "#/definitions/schema.ClassifyClip"
        type: array
      confidence:
        type: string
      duration:
        type: number
      max_score:
        type: number
      name:
        type: string
    type: object
  schema.ClassifyPageInfo:
    properties:
      expired_at:
        type: string
      limit:
        type: integer
      next_token:
        type: string
      prev_token:
        type: string
      total_count:
        type: integer
    type: object
  schema.ClassifyResponse:
    properties:
      labels:
        items:
          $ref: "#/definitions/schema.ClassifyLabelResult"
        type: array
      video_id:
        type: string
    type: object
  schema.CreateClassifyBulkRequest:
    properties:
      conversation_option:
        default: semantic
        enum:
          - semantic
          - transcription
        type: string
      include_clips:
        default: false
        type: boolean
      index_id:
        type: string
      labels:
        items:
          $ref: "#/definitions/schema.ClassifyLabel"
        minItems: 1
        type: array
      options:
        items:
          enum:
            - conversation
            - text_in_video
            - visual
          type: string
        minItems: 1
        type: array
      page_limit:
        default: 10
        maximum: 50
        minimum: 1
        type: integer
      threshold:
        default: low
        enum:
          - high
          - medium
          - low
          - none
        type: string
      video_ids:
        items:
          type: string
        minItems: 1
        type: array
    required:
      - index_id
      - labels
      - options
    type: object
  schema.CreateClassifyRequest:
    properties:
      conversation_option:
        default: semantic
        enum:
          - semantic
          - transcription
        type: string
      include_clips:
        default: false
        type: boolean
      labels:
        items:
          $ref: "#/definitions/schema.ClassifyLabel"
        minItems: 1
        type: array
      options:
        items:
          enum:
            - visual
            - conversation
            - text_in_video
          type: string
        minItems: 1
        type: array
      threshold:
        default: low
        enum:
          - high
          - medium
          - low
          - none
        type: string
      video_id:
        type: string
    required:
      - labels
      - options
      - video_id
    type: object
  schema.SearchPageInfo:
    properties:
      limit_per_page:
        type: integer
      next_page_token:
        type: string
      page_expired_at:
        type: string
      prev_page_token:
        type: string
      total_inner_matches:
        type: integer
      total_results:
        type: integer
    type: object
  schema.SearchParams:
    properties:
      filter:
        additionalProperties:
          type: string
        description: |-
          Filter videos inside the index by metadata
          - Custom metadata can be used as a filter, too
        example:
          duration: "120"
          height: "720"
        type: object
      group_by:
        default: clip
        description: '"video" type is grouped clips by video'
        enum:
          - video
          - clip
        type: string
      index_id:
        type: string
      page_limit:
        default: 10
        description: Size of the page
        maximum: 50
        minimum: 1
        type: integer
      query:
        additionalProperties:
          type: string
        description: |-
          Combination of queries with using operators

          Query: `Block` | `Unit`
          - Block: { "$and": [`Query`] } | { "$or": [`Query`] } | { "$not": `Query` } | { "$strict_or": [`Query`] }
            - "$not" can be valid only when other queries are in the same block
            - "$strict_or" is a special operator which shows the results only when it follows the order of queries
          - Unit : { "text": string, "option": "conversation" | "text_in_video" | "visual", "conversation_option": "transcription" | "semantic" }
            - "text" and "option" are required
            - "conversation_option" is required when "option" is "conversation". Default is "semantic"

          e.g.
          ```json
          { "text": "A man holding an iPad", "option": "visual" }
          ```
          e.g.
          ```json
          {
            "$and": [
              { "text": "A man holding an iPad", "option": "visual"},
              { "text": "iPad", "option": "text_in_video"},
              { "$not": { "text": "Samsung galuxy", "option": "conversation" }
            ]
          }
          ```
        example:
          option: visual
          text: A man holding an iPad
        type: object
      sort_option:
        default: score
        description: |-
          The way how to sort items inside the response.body
          - score: If 'group_by' is video, videos will be sorted by the max score of clips in each video. If 'response_type' is clip, clips will be sorted by score.
          - clip_count : This option is only available when 'response_type' is video. Videos will be sorted by number of clips.
        enum:
          - score
          - clip_count
        type: string
      threshold:
        default: low
        enum:
          - high
          - medium
          - low
          - none
        type: string
    required:
      - index_id
      - query
    type: object
  schema.SearchPool:
    properties:
      index_id:
        type: string
      total_count:
        type: integer
      total_duration:
        type: number
    type: object
  schema.SearchQuery:
    properties:
      $and:
        items:
          $ref: "#/definitions/schema.SearchQuery"
        type: array
      $not:
        $ref: "#/definitions/schema.SearchQuery"
      $or:
        items:
          $ref: "#/definitions/schema.SearchQuery"
        type: array
      adjacency_threshold:
        type: number
      conversation_option:
        enum:
          - transcription
          - semantic
        type: string
      option:
        enum:
          - conversation
          - text_in_video
          - visual
        type: string
      order_strict:
        default: false
        type: boolean
      text:
        minLength: 1
        type: string
    type: object
  schema.SearchResult:
    properties:
      data:
        items: {}
        type: array
      page_info:
        $ref: "#/definitions/schema.SearchPageInfo"
      search_pool:
        $ref: "#/definitions/schema.SearchPool"
    type: object
host: localhost:8080
info:
  contact: {}
  description: If you're on localhost, you have to run gateway on the same machine.
  title: TwelveLabs API
  version: 1.1.0
paths:
  /classify:
    post:
      consumes:
        - application/json
      parameters:
        - description: Classify body parameters
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/schema.CreateClassifyRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/schema.ClassifyResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/httpError.Error"
      security:
        - API_KEY: []
      summary: Create classify
      tags:
        - Classify
  /classify/{page_token}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Page token from previous classify bulk result
          in: path
          name: page_token
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/schema.ClassifyBulkResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/httpError.Error"
      security:
        - API_KEY: []
      summary: Create classify bulk page
      tags:
        - Classify
  /classify/bulk:
    post:
      consumes:
        - application/json
      parameters:
        - description: Classify bulk body parameters
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/schema.CreateClassifyBulkRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/schema.ClassifyBulkResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/httpError.Error"
      security:
        - API_KEY: []
      summary: Create classify bulk
      tags:
        - Classify
  /search:
    post:
      consumes:
        - application/json
      parameters:
        - description: Search body parameters
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/schema.SearchParams"
        - description: Search query interface
          in: body
          name: query
          schema:
            $ref: "#/definitions/schema.SearchQuery"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/schema.SearchResult"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/httpError.Error"
      security:
        - API_KEY: []
      summary: Create search
      tags:
        - Search
  /search/{page_token}:
    get:
      consumes:
        - application/json
      parameters:
        - description: Page token from previous search result
          in: path
          name: page_token
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/schema.SearchResult"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/httpError.Error"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/httpError.Error"
      security:
        - API_KEY: []
      summary: Get search page
      tags:
        - Search
securityDefinitions:
  API_KEY:
    in: header
    name: x-api-key
    type: apiKey
swagger: "2.0"
